type ArchivedTask {
  title: String!
  points: Int!
  completedBy: String!
}

type Message
  @model(
    mutations: { create: null, delete: null, update: null },
  )
  @auth(rules: [
    { allow: custom },
  ])
{
  id: ID!
  message: String!
  authorHouseHoldMemberId: String!
  ChatRoom: ChatRoom @belongsTo(fields: ["chatRoomId"])
  chatRoomId: ID! @index(name: "byChatRoom")
}

type ChatRoom
  @model(
    mutations: { create: null, delete: null, update: null },
  )
  @auth(rules: [
    { allow: custom},
  ])
{
  id: ID!
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  houseHoldId: ID!
  HouseHold: HouseHold @belongsTo(fields: ["houseHoldId"])
}

type Task @model @auth(rules: [
  { allow: custom },
]) {
  id: ID!
  title: String!
  houseHoldId: ID! @index(name: "byHouseHold")
  foreverTask: Boolean
  listId: ID
  List: List @belongsTo(fields: ["listId"])
  itemId: ID
  Item: Item @belongsTo(fields: ["itemId"])
  deleteSourceOnComplete: Boolean
  eventHandlerId: ID
  EventHandler: EventHandler @belongsTo(fields: ["eventHandlerId"])
  completed: Boolean
  pointValue: Int
  HouseHold: HouseHold @belongsTo(fields: ["houseHoldId"])
}

type UserProfile
  @model(
    mutations: { create: null, delete: null },
  )
  @auth(rules: [
    { allow: owner, ownerField: "owner" operations: [read] },
  ])
{
  id: ID!
  owner: String! @index(name: "byOwner", queryField: "userProfileByOwner", sortKeyFields: ["id"])
  preferredName: String @auth(rules: [{ allow: owner, ownerField: "owner", operations: [read, update] }])
  HouseHoldMembers: [HouseHoldMember] @hasMany(indexName: "byUserProfile", fields: ["id"])
}

type HouseHoldMember
  @model(
    mutations: { create: null, delete: null },
  )
  @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [read] },
  ])
{
  id: ID!
  points: Int
  owner: String!
  userProfileId: ID! @index(name: "byUserProfile")
  UserProfile: UserProfile @belongsTo(fields: ["userProfileId"])
  houseHoldId: ID! @index(name: "byHouseHold")
  HouseHold: HouseHold @belongsTo(fields: ["houseHoldId"])
}

type EventHandler
  @model(
    mutations: { create: null, update: null, delete: null },
  )
  @auth(rules: [
    { allow: custom },
  ])
{
  id: ID!
  frequency: String!
  calendarId: ID! @index(name: "byCalendar")
  Calendar: Calendar @belongsTo(fields: ["calendarId"])
  Events: [Event] @hasMany(indexName: "byEventHandler", fields: ["id"])
  Task: Task @hasOne
  sourceDate: AWSDateTime!
  endDate: AWSDateTime!
}

type Event
  @model(
    mutations: { create: null, delete: null },
  )
  @auth(rules: [
    { allow: custom },
  ])
{
  id: ID!
  date: AWSDateTime
  eventHandlerId: ID! @index(name: "byEventHandler")
  calendarId: ID! @index(name: "byCalendar")
  EventHandler: EventHandler @belongsTo(fields: ["eventHandlerId"])
  Calendar: Calendar @belongsTo(fields: ["calendarId"])
}

type Calendar
  @model(
    mutations: { create: null, delete: null },
  )
  @auth(rules: [
    { allow: custom },
  ])
{
  id: ID!
  Events: [Event] @hasMany(indexName: "byCalendar", fields: ["id"])
  EventHandler: [EventHandler] @hasMany(indexName: "byCalendar", fields: ["id"])
  houseHoldId: ID!
  HouseHold: HouseHold @belongsTo(fields: ["houseHoldId"])
}

type HouseHold
  @model(
    mutations: { create: null, delete: null },
  )
  @auth(
    rules: [
      { allow: owner, ownerField: "owners", operations: [read] }
  ])
{
  id: ID!
  name: String! @auth(rules: [{ allow: owner, ownerField: "owners", operations: [read, update] }])
  owners: [String!]!
  Lists: [List] @hasMany(indexName: "byHouseHold", fields: ["id"])
  Tasks: [Task] @hasMany(indexName: "byHouseHold", fields: ["id"])
  HouseHoldMembers: [HouseHoldMember] @hasMany(indexName: "byHouseHold", fields: ["id"])
  Calendar: Calendar @hasOne
  ChatRoom: ChatRoom @hasOne
}

type Item @model @auth(rules: [
  { allow: custom },
]) {
  id: ID!
  title: String!
  description: String
  completed: Boolean
  listId: ID! @index(name: "byList")
  List: List @belongsTo(fields: ["listId"])
  Task: Task @hasOne
}

type List @model @auth(rules: [
  { allow: custom },
]) {
  id: ID!
  title: String!
  description: String
  houseHoldId: ID! @index(name: "byHouseHold")
  Items: [Item] @hasMany(indexName: "byList", fields: ["id"])
  HouseHold: HouseHold @belongsTo(fields: ["houseHoldId"])
  Task: Task @hasOne
}

type Mutation {
  createNewHouseHold(houseHoldName: String!): String @function(name: "createNewHouseHold-${env}") @auth(rules: [{ allow: private }])
  addUserToHouseHold(cognitoUsername: String!, houseHoldId: String!): String @function(name: "addUserToHouseHold-${env}") @auth(rules: [{ allow: custom }])
}
                                           

   